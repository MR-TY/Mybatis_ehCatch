<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ty.dao.EmployeeMapper">
	<!-- 强大的二级缓存 -->
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>
	<!-- 
		1.eviction缓存的回收策略
			• LRU – 最近最少使用的：移除最长时间不被使用的对象。
			• FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
			• SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。
			• WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象
		2.flushInterval缓存刷新间隔
			• 缓存多长时间清空一次，默认是不清空
		3.readOnly缓存是否只读
			• ture：只读，mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据
					mybatis为了加快速度，直接会把数据在缓存中的引用交给用户
			• false：非只读，mybatis认为所有从缓存中获取数据的操作都会被修改
					 mybatis会利用序列化&反序列化技术克隆一份新的数据给你。安全速度慢
		4.size缓存多少元数
		5.type指定自定义缓存的全类名
			• 实现catch的接口
	 -->
<!-- 	<cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"></cache> -->
<!--
1. 接口和 namespace结合之后，就使接口和mybatis绑定了
20、.public Employee getEmployById(Integer id);
原来select是按照id查对象，现在让它变成方法的名字，这样通过接口的方法就能进行sql语句的查询
-->
	<select id="getEmployById" resultType="employee" useCache="true">
		select * from tbl_employee where id = #{id}
	</select>
	 <insert id="addEmp" parameterType="employee">
	 	insert into tbl_employee(last_name,gender,email) values(#{last_name},#{gender},#{email})
	 </insert>
	 
	 <delete id="deleteEmp" parameterType="employee">
	 	delete from tbl_employee where id=#{id}
	 </delete>
	 
	 <update id="updateEmp" parameterType="employee">
	 	update tbl_employee set last_name=#{last_name}, gender=#{gender},email=#{email} 
	 	where id=#{id}
	 </update>
	 
	 <!--public List<Employee> getEmpByIdAndLastName(Integer id, String lastName);  -->
	 <select id="getEmpByIdAndLastName" resultType="employee">
	 	select * from tbl_employee where id =  #{id} and last_name = #{lastName}
	 </select>
	 
	 <select id="getByIdAndLastName" resultType="employee">
	 	select * from ${tableName} where id =  #{id} and last_name = #{lastName}
	 </select>
	 <!--	
	 public List<Employee> getEmpByLikeName(String lastName);
	 -->
	 <select id="getEmpByLikeName" resultType="employee">
	 	select * from tbl_employee where last_name like #{lastName}
	 </select>
	 <!--public Map<Integer, Employee> getEmpsLikesNames(String lastName);  -->
	  <select id="getEmpsLikesNames" resultType="employee">
	 	select * from tbl_employee where last_name like #{lastName}
	 </select>
</mapper>